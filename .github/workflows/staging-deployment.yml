name: Artemis Staging Deployment

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true

concurrency: staging

jobs:
  check-build-status:
    runs-on: ubuntu-latest
    outputs:
      build_workflow_run_id: ${{ steps.set_build_workflow_id.outputs.workflow_id }} 
    steps:
      - name: Get latest build workflow run
        id: get_workflow_run
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/actions/workflows/upload-artemis.yml/runs?branch=${{ github.event.inputs.branch }}&per_page=1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set build workflow ID
        id: set_build_workflow_id
        run: |
          WORKFLOW_ID=$(echo '${{ steps.get_workflow_run.outputs.data }}' | jq -r '.workflow_runs[0].id')
          echo "workflow_id=$WORKFLOW_ID" >> $GITHUB_OUTPUT
    
      - name: Check for war artifact
        id: verify_artifact
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/actions/runs/${{ fromJson(steps.get_workflow_run.outputs.data).workflow_runs[0].id }}/artifacts?name=Artemis.war
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Verify artifact exists
        id: check_result
        run: |
          TOTAL_COUNT=$(echo '${{ steps.verify_artifact.outputs.data }}' | jq -r '.total_count')
            
          if [ "$TOTAL_COUNT" -gt 0 ]; then
            echo "Found Artemis.war artifact in latest build"
          else
            echo "::error::No Artemis.war artifact found in latest build!"
            exit 1
          fi

  deploy:
    needs: check-build-status
    runs-on: ubuntu-latest
    environment: 
      name: artemis-staging-localci.artemis.cit.tum.de
      url: https://artemis-staging-localci.artemis.cit.tum.de
    env:
      HEALTH_CHECK_URL: "https://artemis-staging-localci.artemis.cit.tum.de/management/health"
      WORKFLOW_RUN_ID: ${{needs.check-build-status.outputs.build_workflow_run_id}}
      
      DEPLOYMENT_FOLDER: ${{ vars.DEPLOYMENT_FOLDER }}
      DEPLOYMENT_HOSTS_PRIMARY: ${{ vars.DEPLOYMENT_HOSTS_PRIMARY }}
      DEPLOYMENT_HOSTS_SECONDARY: ${{ vars.DEPLOYMENT_HOSTS_SECONDARY }}
      DEPLOYMENT_USER: ${{ vars.DEPLOYMENT_USER }}
  
    timeout-minutes: 30
    
    steps:
      - name: Verify Environment
        run: |
          echo "Current environment: ${{ github.environment }}"
          echo "Environment URL: ${{ github.event.deployment.environment_url }}"

      - name: Debug Environment Variables
        run: |
          echo "Checking environment variables..."
          echo "WORKFLOW_RUN_ID: ${{ env.WORKFLOW_RUN_ID }}"
          echo "DEPLOYMENT_FOLDER: ${{ env.DEPLOYMENT_FOLDER }}"
          echo "DEPLOYMENT_HOSTS_PRIMARY: ${{ env.DEPLOYMENT_HOSTS_PRIMARY }}"
          echo "DEPLOYMENT_HOSTS_SECONDARY: ${{ env.DEPLOYMENT_HOSTS_SECONDARY }}"
          echo "DEPLOYMENT_USER: ${{ env.DEPLOYMENT_USER }}"
          
          # Check if variables are empty
          if [ -z "$DEPLOYMENT_FOLDER" ]; then
            echo "::warning::DEPLOYMENT_FOLDER is empty!"
          fi
          if [ -z "$DEPLOYMENT_HOSTS_PRIMARY" ]; then
            echo "::warning::DEPLOYMENT_HOSTS_PRIMARY is empty!"
          fi
          if [ -z "$DEPLOYMENT_HOSTS_SECONDARY" ]; then
            echo "::warning::DEPLOYMENT_HOSTS_SECONDARY is empty!"
          fi
          if [ -z "$DEPLOYMENT_USER" ]; then
            echo "::warning::DEPLOYMENT_USER is empty!"
          fi
    
      - name: Download artifact from another workflow
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ env.WORKFLOW_RUN_ID }} 
            });
            const matchArtifact = artifacts.data.artifacts.find((artifact) => {
              return artifact.name === "Artemis.war"
            });
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip'
            });
            const fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/artifact.zip', Buffer.from(download.data));

      - name: Unzip artifact
        run: unzip artifact.zip -d artifacts

      - name: Verify Primary Node Deployment
        id: verify_deployment
        run: |
          while true; do
            echo "Performing health check..."
      
            RESPONSE=$(curl -s -f $HEALTH_CHECK_URL || echo '{"status":"DOWN"}')
            STATUS=$(echo $RESPONSE | jq -r '.status')
      
            if [ "$STATUS" = "UP" ]; then
              echo "Health check passed! Application is UP"
              exit 0
            else
              echo "Health check failed. Status: $STATUS"
              echo "Waiting 30 seconds before next attempt..."
              sleep 30
            fi
          done
